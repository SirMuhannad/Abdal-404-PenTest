using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.Drawing;
using System.Linq;
using System.Media;
using System.Reflection;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace Abdal_Security_Group_App
{
    public partial class Abdal_404_PenTest : Telerik.WinControls.UI.RadForm
    {
        public Abdal_404_PenTest()
        {
            InitializeComponent();
            Version version = Assembly.GetExecutingAssembly().GetName().Version;
            Text = "Abdal 404 PenTest" + " " + version.Major + "." + version.Minor; //change form title
            bgWorker_req_maker.WorkerReportsProgress = true;
            bgWorker_req_maker.WorkerSupportsCancellation = true;

        }

        private void EncryptToggleSwitch_ValueChanged(object sender, EventArgs e)
        {
            
        }

 
        private void Abdal_2Key_Triple_DES_Builder_Load(object sender, EventArgs e)
        {
            // Call Global Chilkat Unlock
            Abdal_Security_Group_App.GlobalUnlockChilkat GlobalUnlock = new Abdal_Security_Group_App.GlobalUnlockChilkat();
            GlobalUnlock.unlock();

            radRadialGauge1.Value = 0;
        }

        private void radMenuItem1_Click(object sender, EventArgs e)
        {

        }

        private void button1_Click(object sender, EventArgs e)
        {
           
        }

        private static Random random = new Random();
        public static string RandomString(int length)
        {
            const string chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
            return new string(Enumerable.Repeat(chars, length)
              .Select(s => s[random.Next(s.Length)]).ToArray());
        }

        private void randButton_Click(object sender, EventArgs e)
        {

           

        }

        private void radButton1_Click(object sender, EventArgs e)
        {
            string[] DangerNameArray = { "abdal",
                "ebrasha",
                "hackers.zone",
                "mambanux",
                "blackwin"};


            foreach (var DangerName in DangerNameArray)
            {

                new Thread(() =>
                {
                    Regex regex = new Regex(@"" + DangerName + ".*");
                    
                        if (regex.Match(targetUrlTextBox.Text.ToLower()).Success)
                        {

                            MessageBox.Show("This domain is unauthorized !");
                            Application.Exit();
                            
                        }

                    

                }).Start();


            }



            if (bgWorker_req_maker.IsBusy != true)
            {
                // Start the asynchronous operation.
                bgWorker_req_maker.RunWorkerAsync();

               

            }




        }

        private void cancelPenTest_Click(object sender, EventArgs e)
        {
            if (bgWorker_req_maker.WorkerSupportsCancellation == true)
            {
                // Cancel the asynchronous operation.
                bgWorker_req_maker.CancelAsync();
            }


        }

        private void bgWorker_req_maker_DoWork(object sender, DoWorkEventArgs e)
        {

            BackgroundWorker worker = sender as BackgroundWorker;

            Chilkat.Http http = new Chilkat.Http();
            http.UserAgent = "Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.9 Safari/537.36";
            string randString = RandomString(25);
            Random rnd = new Random();

            Int32 number_of_attack_req = Convert.ToInt32(textBox_number_attack.Text);
            radProgressBar1.Maximum = number_of_attack_req;
            string http_req_log;
            radialGaugeArc2.RangeStart = 0;
            radialGaugeArc2.RangeEnd = number_of_attack_req;
            radialGaugeArc1.RangeStart = 0;
            radialGaugeArc1.RangeEnd = number_of_attack_req;
            radRadialGauge1.RangeEnd = number_of_attack_req;

            //Sound Alert For Start Attack
            using (var soundPlayer = new SoundPlayer(@"start.wav"))
            {
                soundPlayer.PlaySync(); // can also use soundPlayer.Play()
            }

            //Sound Alert For Start Attack
            this.radDesktopAlert1.CaptionText = "Abdal 404 PenTest";
            this.radDesktopAlert1.ContentText = "PenTesting started";
            this.radDesktopAlert1.Show();




            for (int i = 1; i <= number_of_attack_req ; i++)
            {

                if (worker.CancellationPending == true)
                {
                    e.Cancel = true;
                    break;
                }
                else
                {

                    
                    
                    randString = RandomString(rnd.Next(15, 30));
                    // Send the HTTP GET and return the content in a string.
                    http.QuickGetStr(targetUrlTextBox.Text + "/" + randString);

                    //Add AttackLog in Result Box
                    ResultTextEditor.AppendText(targetUrlTextBox.Text + "/" + randString + Environment.NewLine);
                    ResultTextEditor.SelectionStart = ResultTextEditor.Text.Length;
                    ResultTextEditor.ScrollToCaret();

                    // Perform a time consuming operation and report progress.
                    if(FastAttackToggleSwitch.Value == false)
                    {
                        System.Threading.Thread.Sleep(500);
                    }

                    worker.ReportProgress(i);
                }
            }

        }

        private void bgWorker_req_maker_ProgressChanged(object sender, ProgressChangedEventArgs e)
        {
            radProgressBar1.Value2 = e.ProgressPercentage;
             
            radRadialGauge1.Value = e.ProgressPercentage;
        }

        private void bgWorker_req_maker_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {
            


            if (e.Cancelled == true)
                    {
                this.radDesktopAlert1.CaptionText = "Abdal 404 PenTest";
                this.radDesktopAlert1.ContentText = "Canceled PenTest By User!";
                this.radDesktopAlert1.Show();
                using (var soundPlayer = new SoundPlayer(@"cancel.wav"))
                {
                    soundPlayer.PlaySync(); // can also use soundPlayer.Play()
                }
            }
            else if (e.Error != null)
                    {
                this.radDesktopAlert1.CaptionText = "Abdal 404 PenTest";
                this.radDesktopAlert1.ContentText = e.Error.Message;
                this.radDesktopAlert1.Show();

                using (var soundPlayer = new SoundPlayer(@"error.wav"))
                {
                    soundPlayer.PlaySync(); // can also use soundPlayer.Play()
                }


            }
            else
                    {
                this.radDesktopAlert1.CaptionText = "Abdal 404 PenTest";
                this.radDesktopAlert1.ContentText = "Done!";
                this.radDesktopAlert1.Show();
                using (var soundPlayer = new SoundPlayer(@"done.wav"))
                {
                    soundPlayer.PlaySync(); // can also use soundPlayer.Play()
                }

            }

        }

        private void radRadialGauge1_Click(object sender, EventArgs e)
        {

        }
    }
}
